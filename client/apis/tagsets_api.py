# coding: utf-8

"""
    Fanlens API

     Fanlens API to handle \"activities\". Predictions are performed automatically and can be managed here ## Concepts The API consists of 4 main concepts: sources, activities and tags (bundled in tagsets) and models used for predictions. * An activity is a text based action performed by a user, e.g. a Facebook Comment or a Tweet. * A source is the originator of these activities and is used for importing. Currently Facebook, Twitter, and Generic Sources are supported. * A tag is a piece of meta information that is used to build specialized speech models, e.g. \"positive\", or \"negative\". They are bundled in tagsets for convenience, e.g. \"Emotion\".

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TagsetsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def tagsets_get(self, **kwargs):
        """
        Get tagsets of current user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tagsets_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: TagSetList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tagsets_get_with_http_info(**kwargs)
        else:
            (data) = self.tagsets_get_with_http_info(**kwargs)
            return data

    def tagsets_get_with_http_info(self, **kwargs):
        """
        Get tagsets of current user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tagsets_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: TagSetList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tagsets_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/tagsets/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TagSetList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def tagsets_post(self, tagset, **kwargs):
        """
        Create new tagset
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tagsets_post(tagset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TagSet tagset: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tagsets_post_with_http_info(tagset, **kwargs)
        else:
            (data) = self.tagsets_post_with_http_info(tagset, **kwargs)
            return data

    def tagsets_post_with_http_info(self, tagset, **kwargs):
        """
        Create new tagset
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tagsets_post_with_http_info(tagset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TagSet tagset: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tagset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tagsets_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tagset' is set
        if ('tagset' not in params) or (params['tagset'] is None):
            raise ValueError("Missing the required parameter `tagset` when calling `tagsets_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tagset' in params:
            body_params = params['tagset']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/tagsets/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def tagsets_tagset_id_delete(self, tagset_id, **kwargs):
        """
        Remove the tagset
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tagsets_tagset_id_delete(tagset_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int tagset_id: (required)
        :return: Ok
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tagsets_tagset_id_delete_with_http_info(tagset_id, **kwargs)
        else:
            (data) = self.tagsets_tagset_id_delete_with_http_info(tagset_id, **kwargs)
            return data

    def tagsets_tagset_id_delete_with_http_info(self, tagset_id, **kwargs):
        """
        Remove the tagset
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tagsets_tagset_id_delete_with_http_info(tagset_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int tagset_id: (required)
        :return: Ok
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tagset_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tagsets_tagset_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tagset_id' is set
        if ('tagset_id' not in params) or (params['tagset_id'] is None):
            raise ValueError("Missing the required parameter `tagset_id` when calling `tagsets_tagset_id_delete`")


        collection_formats = {}

        path_params = {}
        if 'tagset_id' in params:
            path_params['tagset_id'] = params['tagset_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/tagsets/{tagset_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Ok',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def tagsets_tagset_id_get(self, tagset_id, **kwargs):
        """
        Get tagset
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tagsets_tagset_id_get(tagset_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int tagset_id: (required)
        :return: TagSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tagsets_tagset_id_get_with_http_info(tagset_id, **kwargs)
        else:
            (data) = self.tagsets_tagset_id_get_with_http_info(tagset_id, **kwargs)
            return data

    def tagsets_tagset_id_get_with_http_info(self, tagset_id, **kwargs):
        """
        Get tagset
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tagsets_tagset_id_get_with_http_info(tagset_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int tagset_id: (required)
        :return: TagSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tagset_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tagsets_tagset_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tagset_id' is set
        if ('tagset_id' not in params) or (params['tagset_id'] is None):
            raise ValueError("Missing the required parameter `tagset_id` when calling `tagsets_tagset_id_get`")


        collection_formats = {}

        path_params = {}
        if 'tagset_id' in params:
            path_params['tagset_id'] = params['tagset_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/tagsets/{tagset_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TagSet',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def tagsets_tagset_id_patch(self, tagset_id, tagset, **kwargs):
        """
        Update the tagset
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tagsets_tagset_id_patch(tagset_id, tagset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int tagset_id: (required)
        :param TagSet tagset: Can be a subset of the TagSet fields. Only the specified fields will be updated. (required)
        :return: TagSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tagsets_tagset_id_patch_with_http_info(tagset_id, tagset, **kwargs)
        else:
            (data) = self.tagsets_tagset_id_patch_with_http_info(tagset_id, tagset, **kwargs)
            return data

    def tagsets_tagset_id_patch_with_http_info(self, tagset_id, tagset, **kwargs):
        """
        Update the tagset
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tagsets_tagset_id_patch_with_http_info(tagset_id, tagset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int tagset_id: (required)
        :param TagSet tagset: Can be a subset of the TagSet fields. Only the specified fields will be updated. (required)
        :return: TagSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tagset_id', 'tagset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tagsets_tagset_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tagset_id' is set
        if ('tagset_id' not in params) or (params['tagset_id'] is None):
            raise ValueError("Missing the required parameter `tagset_id` when calling `tagsets_tagset_id_patch`")
        # verify the required parameter 'tagset' is set
        if ('tagset' not in params) or (params['tagset'] is None):
            raise ValueError("Missing the required parameter `tagset` when calling `tagsets_tagset_id_patch`")


        collection_formats = {}

        path_params = {}
        if 'tagset_id' in params:
            path_params['tagset_id'] = params['tagset_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tagset' in params:
            body_params = params['tagset']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/tagsets/{tagset_id}', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TagSet',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def tagsets_tagset_id_tag_delete(self, tagset_id, tag, **kwargs):
        """
        Remove tag from tagset
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tagsets_tagset_id_tag_delete(tagset_id, tag, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int tagset_id: (required)
        :param str tag: (required)
        :return: Ok
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tagsets_tagset_id_tag_delete_with_http_info(tagset_id, tag, **kwargs)
        else:
            (data) = self.tagsets_tagset_id_tag_delete_with_http_info(tagset_id, tag, **kwargs)
            return data

    def tagsets_tagset_id_tag_delete_with_http_info(self, tagset_id, tag, **kwargs):
        """
        Remove tag from tagset
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tagsets_tagset_id_tag_delete_with_http_info(tagset_id, tag, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int tagset_id: (required)
        :param str tag: (required)
        :return: Ok
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tagset_id', 'tag']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tagsets_tagset_id_tag_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tagset_id' is set
        if ('tagset_id' not in params) or (params['tagset_id'] is None):
            raise ValueError("Missing the required parameter `tagset_id` when calling `tagsets_tagset_id_tag_delete`")
        # verify the required parameter 'tag' is set
        if ('tag' not in params) or (params['tag'] is None):
            raise ValueError("Missing the required parameter `tag` when calling `tagsets_tagset_id_tag_delete`")

        if 'tag' in params and len(params['tag']) > 32:
            raise ValueError("Invalid value for parameter `tag` when calling `tagsets_tagset_id_tag_delete`, length must be less than or equal to `32`")
        if 'tag' in params and len(params['tag']) < 1:
            raise ValueError("Invalid value for parameter `tag` when calling `tagsets_tagset_id_tag_delete`, length must be greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'tagset_id' in params:
            path_params['tagset_id'] = params['tagset_id']
        if 'tag' in params:
            path_params['tag'] = params['tag']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/tagsets/{tagset_id}/{tag}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Ok',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def tagsets_tagset_id_tag_put(self, tagset_id, tag, **kwargs):
        """
        Add tag to the tagset
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tagsets_tagset_id_tag_put(tagset_id, tag, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int tagset_id: (required)
        :param str tag: (required)
        :return: Ok
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tagsets_tagset_id_tag_put_with_http_info(tagset_id, tag, **kwargs)
        else:
            (data) = self.tagsets_tagset_id_tag_put_with_http_info(tagset_id, tag, **kwargs)
            return data

    def tagsets_tagset_id_tag_put_with_http_info(self, tagset_id, tag, **kwargs):
        """
        Add tag to the tagset
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tagsets_tagset_id_tag_put_with_http_info(tagset_id, tag, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int tagset_id: (required)
        :param str tag: (required)
        :return: Ok
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tagset_id', 'tag']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tagsets_tagset_id_tag_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tagset_id' is set
        if ('tagset_id' not in params) or (params['tagset_id'] is None):
            raise ValueError("Missing the required parameter `tagset_id` when calling `tagsets_tagset_id_tag_put`")
        # verify the required parameter 'tag' is set
        if ('tag' not in params) or (params['tag'] is None):
            raise ValueError("Missing the required parameter `tag` when calling `tagsets_tagset_id_tag_put`")

        if 'tag' in params and len(params['tag']) > 32:
            raise ValueError("Invalid value for parameter `tag` when calling `tagsets_tagset_id_tag_put`, length must be less than or equal to `32`")
        if 'tag' in params and len(params['tag']) < 1:
            raise ValueError("Invalid value for parameter `tag` when calling `tagsets_tagset_id_tag_put`, length must be greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'tagset_id' in params:
            path_params['tagset_id'] = params['tagset_id']
        if 'tag' in params:
            path_params['tag'] = params['tag']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/tagsets/{tagset_id}/{tag}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Ok',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
