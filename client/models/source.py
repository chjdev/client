# coding: utf-8

"""
    Fanlens API

     Fanlens API to handle \"activities\". Predictions are performed automatically and can be managed here ## Concepts The API consists of 4 main concepts: sources, activities and tags (bundled in tagsets) and models used for predictions. * An activity is a text based action performed by a user, e.g. a Facebook Comment or a Tweet. * A source is the originator of these activities and is used for importing. Currently Facebook, Twitter, and Generic Sources are supported. * A tag is a piece of meta information that is used to build specialized speech models, e.g. \"positive\", or \"negative\". They are bundled in tagsets for convenience, e.g. \"Emotion\".

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Source(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'type': 'str',
        'uri': 'str',
        'slug': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'uri': 'uri',
        'slug': 'slug'
    }

    def __init__(self, id=None, type=None, uri=None, slug=None):
        """
        Source - a model defined in Swagger
        """

        self._id = None
        self._type = None
        self._uri = None
        self._slug = None

        if id is not None:
          self.id = id
        if type is not None:
          self.type = type
        if uri is not None:
          self.uri = uri
        if slug is not None:
          self.slug = slug

    @property
    def id(self):
        """
        Gets the id of this Source.
        Assigned by the system

        :return: The id of this Source.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Source.
        Assigned by the system

        :param id: The id of this Source.
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """
        Gets the type of this Source.
        Source type (forces specific data format)

        :return: The type of this Source.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Source.
        Source type (forces specific data format)

        :param type: The type of this Source.
        :type: str
        """
        allowed_values = ["facebook", "twitter", "generic"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """
        Gets the uri of this Source.
        Canoncial URI of the source, e.g. Twitter account URI.

        :return: The uri of this Source.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this Source.
        Canoncial URI of the source, e.g. Twitter account URI.

        :param uri: The uri of this Source.
        :type: str
        """

        self._uri = uri

    @property
    def slug(self):
        """
        Gets the slug of this Source.
        Identifier for the URI. Required for Twitter and Facebook sources.

        :return: The slug of this Source.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """
        Sets the slug of this Source.
        Identifier for the URI. Required for Twitter and Facebook sources.

        :param slug: The slug of this Source.
        :type: str
        """
        if slug is not None and len(slug) > 128:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `128`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")

        self._slug = slug

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Source):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
