# coding: utf-8

"""
    Fanlens API

     Fanlens API to handle \"activities\". Predictions are performed automatically and can be managed here ## Concepts The API consists of 4 main concepts: sources, activities and tags (bundled in tagsets) and models used for predictions. * An activity is a text based action performed by a user, e.g. a Facebook Comment or a Tweet. * A source is the originator of these activities and is used for importing. Currently Facebook, Twitter, and Generic Sources are supported. * A tag is a piece of meta information that is used to build specialized speech models, e.g. \"positive\", or \"negative\". They are bundled in tagsets for convenience, e.g. \"Emotion\".

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ImportApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def root_post(self, import_activities, **kwargs):
        """
        Import a bulk of activities
        The data field format is source dependent
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.root_post(import_activities, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ImportList import_activities: (required)
        :return: ActivityList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.root_post_with_http_info(import_activities, **kwargs)
        else:
            (data) = self.root_post_with_http_info(import_activities, **kwargs)
            return data

    def root_post_with_http_info(self, import_activities, **kwargs):
        """
        Import a bulk of activities
        The data field format is source dependent
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.root_post_with_http_info(import_activities, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ImportList import_activities: (required)
        :return: ActivityList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_activities']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method root_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_activities' is set
        if ('import_activities' not in params) or (params['import_activities'] is None):
            raise ValueError("Missing the required parameter `import_activities` when calling `root_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'import_activities' in params:
            body_params = params['import_activities']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ActivityList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def source_id_activity_id_delete(self, source_id, activity_id, **kwargs):
        """
        Delete this activity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.source_id_activity_id_delete(source_id, activity_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int source_id: (required)
        :param str activity_id: (required)
        :return: Ok
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.source_id_activity_id_delete_with_http_info(source_id, activity_id, **kwargs)
        else:
            (data) = self.source_id_activity_id_delete_with_http_info(source_id, activity_id, **kwargs)
            return data

    def source_id_activity_id_delete_with_http_info(self, source_id, activity_id, **kwargs):
        """
        Delete this activity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.source_id_activity_id_delete_with_http_info(source_id, activity_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int source_id: (required)
        :param str activity_id: (required)
        :return: Ok
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_id', 'activity_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method source_id_activity_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params) or (params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `source_id_activity_id_delete`")
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params) or (params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `source_id_activity_id_delete`")

        if 'activity_id' in params and len(params['activity_id']) > 128:
            raise ValueError("Invalid value for parameter `activity_id` when calling `source_id_activity_id_delete`, length must be less than or equal to `128`")
        if 'activity_id' in params and len(params['activity_id']) < 1:
            raise ValueError("Invalid value for parameter `activity_id` when calling `source_id_activity_id_delete`, length must be greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'source_id' in params:
            path_params['source_id'] = params['source_id']
        if 'activity_id' in params:
            path_params['activity_id'] = params['activity_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/{source_id}/{activity_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Ok',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def source_id_activity_id_put(self, source_id, activity_id, activity_import, **kwargs):
        """
        Create or update this activity
        The data field format is source dependent
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.source_id_activity_id_put(source_id, activity_id, activity_import, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int source_id: (required)
        :param str activity_id: (required)
        :param ModelImport activity_import: (required)
        :return: Ok
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.source_id_activity_id_put_with_http_info(source_id, activity_id, activity_import, **kwargs)
        else:
            (data) = self.source_id_activity_id_put_with_http_info(source_id, activity_id, activity_import, **kwargs)
            return data

    def source_id_activity_id_put_with_http_info(self, source_id, activity_id, activity_import, **kwargs):
        """
        Create or update this activity
        The data field format is source dependent
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.source_id_activity_id_put_with_http_info(source_id, activity_id, activity_import, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int source_id: (required)
        :param str activity_id: (required)
        :param ModelImport activity_import: (required)
        :return: Ok
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_id', 'activity_id', 'activity_import']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method source_id_activity_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params) or (params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `source_id_activity_id_put`")
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params) or (params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `source_id_activity_id_put`")
        # verify the required parameter 'activity_import' is set
        if ('activity_import' not in params) or (params['activity_import'] is None):
            raise ValueError("Missing the required parameter `activity_import` when calling `source_id_activity_id_put`")

        if 'activity_id' in params and len(params['activity_id']) > 128:
            raise ValueError("Invalid value for parameter `activity_id` when calling `source_id_activity_id_put`, length must be less than or equal to `128`")
        if 'activity_id' in params and len(params['activity_id']) < 1:
            raise ValueError("Invalid value for parameter `activity_id` when calling `source_id_activity_id_put`, length must be greater than or equal to `1`")

        collection_formats = {}

        path_params = {}
        if 'source_id' in params:
            path_params['source_id'] = params['source_id']
        if 'activity_id' in params:
            path_params['activity_id'] = params['activity_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'activity_import' in params:
            body_params = params['activity_import']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/{source_id}/{activity_id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Ok',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
