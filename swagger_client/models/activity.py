# coding: utf-8

"""
    Fanlens API

     Fanlens API to handle \"activities\". Predictions are performed automatically and can be managed here ## Concepts The API consists of 4 main concepts: sources, activities and tags (bundled in tagsets) and models used for predictions. * An activity is a text based action performed by a user, e.g. a Facebook Comment or a Tweet. * A source is the originator of these activities and is used for importing. Currently Facebook, Twitter, and Generic Sources are supported. * A tag is a piece of meta information that is used to build specialized speech models, e.g. \"positive\", or \"negative\". They are bundled in tagsets for convenience, e.g. \"Emotion\".

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Activity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'text': 'str',
        'source': 'Source',
        'tags': 'Tags',
        'prediction': 'Prediction',
        'user': 'User',
        'language': 'str',
        'created_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'text': 'text',
        'source': 'source',
        'tags': 'tags',
        'prediction': 'prediction',
        'user': 'user',
        'language': 'language',
        'created_time': 'created_time'
    }

    def __init__(self, id=None, text=None, source=None, tags=None, prediction=None, user=None, language=None, created_time=None):
        """
        Activity - a model defined in Swagger
        """

        self._id = None
        self._text = None
        self._source = None
        self._tags = None
        self._prediction = None
        self._user = None
        self._language = None
        self._created_time = None

        self.id = id
        if text is not None:
          self.text = text
        if source is not None:
          self.source = source
        if tags is not None:
          self.tags = tags
        if prediction is not None:
          self.prediction = prediction
        if user is not None:
          self.user = user
        if language is not None:
          self.language = language
        if created_time is not None:
          self.created_time = created_time

    @property
    def id(self):
        """
        Gets the id of this Activity.

        :return: The id of this Activity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Activity.

        :param id: The id of this Activity.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 128:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `128`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def text(self):
        """
        Gets the text of this Activity.

        :return: The text of this Activity.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this Activity.

        :param text: The text of this Activity.
        :type: str
        """

        self._text = text

    @property
    def source(self):
        """
        Gets the source of this Activity.

        :return: The source of this Activity.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this Activity.

        :param source: The source of this Activity.
        :type: Source
        """

        self._source = source

    @property
    def tags(self):
        """
        Gets the tags of this Activity.

        :return: The tags of this Activity.
        :rtype: Tags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Activity.

        :param tags: The tags of this Activity.
        :type: Tags
        """

        self._tags = tags

    @property
    def prediction(self):
        """
        Gets the prediction of this Activity.

        :return: The prediction of this Activity.
        :rtype: Prediction
        """
        return self._prediction

    @prediction.setter
    def prediction(self, prediction):
        """
        Sets the prediction of this Activity.

        :param prediction: The prediction of this Activity.
        :type: Prediction
        """

        self._prediction = prediction

    @property
    def user(self):
        """
        Gets the user of this Activity.

        :return: The user of this Activity.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this Activity.

        :param user: The user of this Activity.
        :type: User
        """

        self._user = user

    @property
    def language(self):
        """
        Gets the language of this Activity.
        Inferred language of text

        :return: The language of this Activity.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this Activity.
        Inferred language of text

        :param language: The language of this Activity.
        :type: str
        """
        if language is not None and len(language) > 12:
            raise ValueError("Invalid value for `language`, length must be less than or equal to `12`")
        if language is not None and len(language) < 2:
            raise ValueError("Invalid value for `language`, length must be greater than or equal to `2`")

        self._language = language

    @property
    def created_time(self):
        """
        Gets the created_time of this Activity.
        DateTime of creation

        :return: The created_time of this Activity.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """
        Sets the created_time of this Activity.
        DateTime of creation

        :param created_time: The created_time of this Activity.
        :type: datetime
        """

        self._created_time = created_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Activity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
