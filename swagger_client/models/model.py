# coding: utf-8

"""
    Fanlens API

     Fanlens API to handle \"activities\". Predictions are performed automatically and can be managed here ## Concepts The API consists of 4 main concepts: sources, activities and tags (bundled in tagsets) and models used for predictions. * An activity is a text based action performed by a user, e.g. a Facebook Comment or a Tweet. * A source is the originator of these activities and is used for importing. Currently Facebook, Twitter, and Generic Sources are supported. * A tag is a piece of meta information that is used to build specialized speech models, e.g. \"positive\", or \"negative\". They are bundled in tagsets for convenience, e.g. \"Emotion\".

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Model(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'trained_ts': 'datetime',
        'score': 'float',
        'params': 'object',
        'tagset': 'TagSet',
        'sources': 'list[Source]'
    }

    attribute_map = {
        'id': 'id',
        'trained_ts': 'trained_ts',
        'score': 'score',
        'params': 'params',
        'tagset': 'tagset',
        'sources': 'sources'
    }

    def __init__(self, id=None, trained_ts=None, score=None, params=None, tagset=None, sources=None):
        """
        Model - a model defined in Swagger
        """

        self._id = None
        self._trained_ts = None
        self._score = None
        self._params = None
        self._tagset = None
        self._sources = None

        self.id = id
        self.trained_ts = trained_ts
        if score is not None:
          self.score = score
        if params is not None:
          self.params = params
        if tagset is not None:
          self.tagset = tagset
        if sources is not None:
          self.sources = sources

    @property
    def id(self):
        """
        Gets the id of this Model.
        Assigned by the system

        :return: The id of this Model.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Model.
        Assigned by the system

        :param id: The id of this Model.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def trained_ts(self):
        """
        Gets the trained_ts of this Model.
        The timestamp when this model was created

        :return: The trained_ts of this Model.
        :rtype: datetime
        """
        return self._trained_ts

    @trained_ts.setter
    def trained_ts(self, trained_ts):
        """
        Sets the trained_ts of this Model.
        The timestamp when this model was created

        :param trained_ts: The trained_ts of this Model.
        :type: datetime
        """
        if trained_ts is None:
            raise ValueError("Invalid value for `trained_ts`, must not be `None`")

        self._trained_ts = trained_ts

    @property
    def score(self):
        """
        Gets the score of this Model.
        The f1 score of the model, restricted access

        :return: The score of this Model.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """
        Sets the score of this Model.
        The f1 score of the model, restricted access

        :param score: The score of this Model.
        :type: float
        """
        if score is not None and score > 1:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `1`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score

    @property
    def params(self):
        """
        Gets the params of this Model.
        The model parameters, restricted access

        :return: The params of this Model.
        :rtype: object
        """
        return self._params

    @params.setter
    def params(self, params):
        """
        Sets the params of this Model.
        The model parameters, restricted access

        :param params: The params of this Model.
        :type: object
        """

        self._params = params

    @property
    def tagset(self):
        """
        Gets the tagset of this Model.

        :return: The tagset of this Model.
        :rtype: TagSet
        """
        return self._tagset

    @tagset.setter
    def tagset(self, tagset):
        """
        Sets the tagset of this Model.

        :param tagset: The tagset of this Model.
        :type: TagSet
        """

        self._tagset = tagset

    @property
    def sources(self):
        """
        Gets the sources of this Model.
        The sources this model is trained on

        :return: The sources of this Model.
        :rtype: list[Source]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """
        Sets the sources of this Model.
        The sources this model is trained on

        :param sources: The sources of this Model.
        :type: list[Source]
        """

        self._sources = sources

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Model):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
